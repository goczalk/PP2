


# include <iostream>

using namespace std;

void add(char * const, char * const, char *);
void negation(char* const, char *);
void print(char * const, char * const, char * const);
void shift(char* a,char* q, char* q1);

int main()
{
    //Q = 3, M = 7
    char A[9] = "00000000";
    char Q[9] = "00000011";
    char M[9] = "00000111";
    char nM[9] = "00000000";
    char Q1[2] = "0";

    cout << "M to: " << M << ", Q to: " << Q << endl;
    negation(M, nM);

    int i;
    cout << "\t A \t\t Q \t\t Q1" << endl;
    print(A, Q, Q1);

    for (i = 7; i >= 0; i--){
        char * temp = A;
        //10
        if ((Q[7] == '1' && Q1[0] == '0')) {
			cout << " -M" << endl;
			add(temp, nM, A);
			print(A, Q, Q1);
		}
		//01
		else if ((Q[7] == '0' && Q1[0] == '1')) {
			cout << " +M" << endl;
			add(temp, M, A);
			print(A, Q, Q1);
		}
		cout << " >> " << endl;
		shift(A, Q, Q1);
		print(A, Q, Q1);
    }

    cout << endl << "Wynik to: " << A << Q ;
    return 0;
}

void shift(char* a,char* q, char* q1){
    q1[0] = q[7];

    int i;
    for( i = 7; i > 0; i --){
        q[i] = q[i-1];
    }
    q[0] = a[7];

    for ( i = 7; i > 0; i-- ){
        a[i] = a[i-1];
    }
    a[0] = a[1];
}

void add(char * const a, char * const b, char * result){
    int i;
    int carry = 0;
    for(i = 7 ; i >= 0  ; i--){
        result[i] = a[i] + b[i] - '0' + carry;
        if(result[i] > '1'){
            result[i] -= 2;
            carry = 1;
        }
        else{
            carry=0;
        }
    }
}

void negation(char* const source, char * dest){
    char one[9] = "00000001";
    char * temp = source, * temp2 = dest;

    while(*temp != '\0'){
        if (*temp == '0'){
            *temp2 = '1';
        }
        else{
            *temp2 = '0';
        }
        temp2++;
        temp++;
    }
    temp = dest;
    add(dest, one, dest);
}

void print(char * const A, char * const Q, char * const Q1){
    cout << "\t " << A << "\t " << Q << " \t " <<Q1;
}
